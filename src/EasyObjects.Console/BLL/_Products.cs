/*
'===============================================================================
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by T4 Template

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using NCI.EasyObjects;

namespace EasyObjects.Console.BLL
{
    public class ProductsSchema : NCI.EasyObjects.Schema
    {
        private static List<SchemaItem> _entries;
		public static SchemaItem ProductID = new SchemaItem("ProductID", DbType.Int32, true, false, false, true, false, false);
		public static SchemaItem ProductName = new SchemaItem("ProductName", DbType.String, SchemaItemJustify.None, 40, false, false, false, false);
		public static SchemaItem SupplierID = new SchemaItem("SupplierID", DbType.Int32, false, true, false, false, true, false);
		public static SchemaItem CategoryID = new SchemaItem("CategoryID", DbType.Int32, false, true, false, false, true, false);
		public static SchemaItem QuantityPerUnit = new SchemaItem("QuantityPerUnit", DbType.String, SchemaItemJustify.None, 20, true, false, false, false);
		public static SchemaItem UnitPrice = new SchemaItem("UnitPrice", DbType.Decimal, false, true, false, false, false, false);
		public static SchemaItem UnitsInStock = new SchemaItem("UnitsInStock", DbType.Int16, false, true, false, false, false, false);
		public static SchemaItem UnitsOnOrder = new SchemaItem("UnitsOnOrder", DbType.Int16, false, true, false, false, false, false);
		public static SchemaItem ReorderLevel = new SchemaItem("ReorderLevel", DbType.Int16, false, true, false, false, false, false);
		public static SchemaItem Discontinued = new SchemaItem("Discontinued", DbType.Boolean, false, false, false, false, false, false);
        
		public override List<SchemaItem> SchemaEntries
        {
            get
            {
                if (_entries == null || _entries.Count == 0)
                {
                    _entries = new List<SchemaItem>
                    {
                        ProductsSchema.ProductID,
                        ProductsSchema.ProductName,
                        ProductsSchema.SupplierID,
                        ProductsSchema.CategoryID,
                        ProductsSchema.QuantityPerUnit,
                        ProductsSchema.UnitPrice,
                        ProductsSchema.UnitsInStock,
                        ProductsSchema.UnitsOnOrder,
                        ProductsSchema.ReorderLevel,
                        ProductsSchema.Discontinued,
                    };
                }

                return _entries;
            }
        }

        public static bool HasAutoKey { get => true; }
        public static bool HasRowID { get => false; }
	}
	
	public class _Products : EasyObject
	{

		public _Products()
		{
			ProductsSchema _schema = new ProductsSchema();
			this.SchemaEntries = _schema.SchemaEntries;
			this.SchemaGlobal = "dbo";
		}
		
		public override void FlushData() 	 
		{ 	 
			this._whereClause = null; 	 
			this._aggregateClause = null; 	 
			base.FlushData(); 	 
		}
			   
		/// <summary>
		/// Loads the business object with info from the database, based on the requested primary key.
		/// </summary>
		/// <param name="productID"></param>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadByPrimaryKey(int productID)
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					ListDictionary parameters = new ListDictionary
					{
						{ ProductsSchema.ProductID.FieldName, productID },
					};

					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetProducts", parameters, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.ProductID.Value = productID;
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}
	
		/// <summary>
		/// Loads all records from the table.
		/// </summary>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadAll()
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "daab_GetAllProducts", null, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		/// <summary>
		/// Adds a new record to the internal table.
		/// </summary>
		public override void AddNew()
		{
			base.AddNew();
			this.ApplyDefaults();
		}

		/// <summary>
		/// Apply any default values to columns
		/// </summary>
		protected override void ApplyDefaults()
		{
		}

		protected override DbCommand GetInsertCommand(CommandType commandType)
		{	
			DbCommand dbCommand;

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_AddProducts";
                    dbCommand = new SqlCommand
                    {
                        CommandType = CommandType.StoredProcedure,
                        CommandText = sqlCommand,
                        CommandTimeout = CommandTimeout > 0 ? CommandTimeout : 0
                    };

					base.AddParameter(dbCommand, "ProductID", DbType.Int32, 4, ParameterDirection.Output, true, 0, 0, "ProductID", DataRowVersion.Default, Convert.DBNull);
					CreateParameters(dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!item.IsComputed)
						{
							if ((item.IsAutoKey && this.IdentityInsert) || !item.IsAutoKey)
							{
								this.Query.AddInsertColumn(item);
							}
						}
					}
					dbCommand = this.Query.GetInsertCommandWrapper();

					dbCommand.Parameters.Clear();
					if (this.IdentityInsert)
					{
						base.AddInParameter(dbCommand, "ProductID", DbType.Int32, "ProductID", DataRowVersion.Default);
					}
					else
					{
						base.AddParameter(dbCommand, "ProductID", DbType.Int32, 4, ParameterDirection.Output, true, 0, 0, "ProductID", DataRowVersion.Default, Convert.DBNull);
					}
					CreateParameters(dbCommand);

					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetUpdateCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_UpdateProducts";
                    dbCommand = new SqlCommand
                    {
                        CommandType = CommandType.StoredProcedure,
                        CommandText = sqlCommand,
                        CommandTimeout = CommandTimeout > 0 ? CommandTimeout : 0
                    };

					base.AddInParameter(dbCommand, "ProductID", DbType.Int32, "ProductID", DataRowVersion.Current);
					CreateParameters(dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!(item.IsAutoKey || item.IsComputed))
						{
							this.Query.AddUpdateColumn(item);
						}
					}

					this.Where.WhereClauseReset();
					this.Where.ProductID.Operator = WhereParameter.Operand.Equal;
					dbCommand = this.Query.GetUpdateCommandWrapper();

					dbCommand.Parameters.Clear();
					CreateParameters(dbCommand);
					base.AddInParameter(dbCommand, "ProductID", DbType.Int32, "ProductID", DataRowVersion.Current);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetDeleteCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "daab_DeleteProducts";
                    dbCommand = new SqlCommand
                    {
                        CommandType = CommandType.StoredProcedure,
                        CommandText = sqlCommand,
                        CommandTimeout = CommandTimeout > 0 ? CommandTimeout : 0
                    };

					base.AddInParameter(dbCommand, "ProductID", DbType.Int32, "ProductID", DataRowVersion.Current);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					this.Where.ProductID.Operator = WhereParameter.Operand.Equal;
					dbCommand = this.Query.GetDeleteCommandWrapper();

					dbCommand.Parameters.Clear();
					base.AddInParameter(dbCommand, "ProductID", DbType.Int32, "ProductID", DataRowVersion.Current);
					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		private void CreateParameters(DbCommand dbCommand)
		{
			base.AddInParameter(dbCommand, "ProductName", DbType.String, "ProductName", DataRowVersion.Current);
			base.AddInParameter(dbCommand, "SupplierID", DbType.Int32, "SupplierID", DataRowVersion.Current);
			base.AddInParameter(dbCommand, "CategoryID", DbType.Int32, "CategoryID", DataRowVersion.Current);
			base.AddInParameter(dbCommand, "QuantityPerUnit", DbType.String, "QuantityPerUnit", DataRowVersion.Current);
			base.AddInParameter(dbCommand, "UnitPrice", DbType.Decimal, "UnitPrice", DataRowVersion.Current);
			base.AddInParameter(dbCommand, "UnitsInStock", DbType.Int16, "UnitsInStock", DataRowVersion.Current);
			base.AddInParameter(dbCommand, "UnitsOnOrder", DbType.Int16, "UnitsOnOrder", DataRowVersion.Current);
			base.AddInParameter(dbCommand, "ReorderLevel", DbType.Int16, "ReorderLevel", DataRowVersion.Current);
			base.AddInParameter(dbCommand, "Discontinued", DbType.Boolean, "Discontinued", DataRowVersion.Current);
		}

		#region Properties
		public virtual int ProductID
		{
			get
			{
				return this.GetInteger(ProductsSchema.ProductID.FieldName);
	    	}
			set
			{
				this.SetInteger(ProductsSchema.ProductID.FieldName, value);
			}
		}
		public virtual string ProductName
		{
			get
			{
				return this.GetString(ProductsSchema.ProductName.FieldName);
	    	}
			set
			{
				this.SetString(ProductsSchema.ProductName.FieldName, value);
			}
		}
		public virtual int SupplierID
		{
			get
			{
				return this.GetInteger(ProductsSchema.SupplierID.FieldName);
	    	}
			set
			{
				this.SetInteger(ProductsSchema.SupplierID.FieldName, value);
			}
		}
		public virtual int CategoryID
		{
			get
			{
				return this.GetInteger(ProductsSchema.CategoryID.FieldName);
	    	}
			set
			{
				this.SetInteger(ProductsSchema.CategoryID.FieldName, value);
			}
		}
		public virtual string QuantityPerUnit
		{
			get
			{
				return this.GetString(ProductsSchema.QuantityPerUnit.FieldName);
	    	}
			set
			{
				this.SetString(ProductsSchema.QuantityPerUnit.FieldName, value);
			}
		}
		public virtual decimal UnitPrice
		{
			get
			{
				return this.GetDecimal(ProductsSchema.UnitPrice.FieldName);
	    	}
			set
			{
				this.SetDecimal(ProductsSchema.UnitPrice.FieldName, value);
			}
		}
		public virtual short UnitsInStock
		{
			get
			{
				return this.GetShort(ProductsSchema.UnitsInStock.FieldName);
	    	}
			set
			{
				this.SetShort(ProductsSchema.UnitsInStock.FieldName, value);
			}
		}
		public virtual short UnitsOnOrder
		{
			get
			{
				return this.GetShort(ProductsSchema.UnitsOnOrder.FieldName);
	    	}
			set
			{
				this.SetShort(ProductsSchema.UnitsOnOrder.FieldName, value);
			}
		}
		public virtual short ReorderLevel
		{
			get
			{
				return this.GetShort(ProductsSchema.ReorderLevel.FieldName);
	    	}
			set
			{
				this.SetShort(ProductsSchema.ReorderLevel.FieldName, value);
			}
		}
		public virtual bool Discontinued
		{
			get
			{
				return this.GetBoolean(ProductsSchema.Discontinued.FieldName);
	    	}
			set
			{
				this.SetBoolean(ProductsSchema.Discontinued.FieldName, value);
			}
		}
		public override string TableName
		{
			get { return "Products"; }
		}
		
		#endregion		
		
		#region String Properties
#pragma warning disable IDE1006 // Naming Styles
		public virtual string s_ProductID
		{
			get
			{
				return this.IsColumnNull(ProductsSchema.ProductID.FieldName) ? string.Empty : base.GetIntegerAsString(ProductsSchema.ProductID.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(ProductsSchema.ProductID.FieldName);
				}
				else
				{
					this.ProductID = base.SetIntegerAsString(ProductsSchema.ProductID.FieldName, value);
				}
			}
		}
		public virtual string s_ProductName
		{
			get
			{
				return this.IsColumnNull(ProductsSchema.ProductName.FieldName) ? string.Empty : base.GetStringAsString(ProductsSchema.ProductName.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(ProductsSchema.ProductName.FieldName);
				}
				else
				{
					this.ProductName = base.SetStringAsString(ProductsSchema.ProductName.FieldName, value);
				}
			}
		}
		public virtual string s_SupplierID
		{
			get
			{
				return this.IsColumnNull(ProductsSchema.SupplierID.FieldName) ? string.Empty : base.GetIntegerAsString(ProductsSchema.SupplierID.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(ProductsSchema.SupplierID.FieldName);
				}
				else
				{
					this.SupplierID = base.SetIntegerAsString(ProductsSchema.SupplierID.FieldName, value);
				}
			}
		}
		public virtual string s_CategoryID
		{
			get
			{
				return this.IsColumnNull(ProductsSchema.CategoryID.FieldName) ? string.Empty : base.GetIntegerAsString(ProductsSchema.CategoryID.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(ProductsSchema.CategoryID.FieldName);
				}
				else
				{
					this.CategoryID = base.SetIntegerAsString(ProductsSchema.CategoryID.FieldName, value);
				}
			}
		}
		public virtual string s_QuantityPerUnit
		{
			get
			{
				return this.IsColumnNull(ProductsSchema.QuantityPerUnit.FieldName) ? string.Empty : base.GetStringAsString(ProductsSchema.QuantityPerUnit.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(ProductsSchema.QuantityPerUnit.FieldName);
				}
				else
				{
					this.QuantityPerUnit = base.SetStringAsString(ProductsSchema.QuantityPerUnit.FieldName, value);
				}
			}
		}
		public virtual string s_UnitPrice
		{
			get
			{
				return this.IsColumnNull(ProductsSchema.UnitPrice.FieldName) ? string.Empty : base.GetDecimalAsString(ProductsSchema.UnitPrice.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(ProductsSchema.UnitPrice.FieldName);
				}
				else
				{
					this.UnitPrice = base.SetDecimalAsString(ProductsSchema.UnitPrice.FieldName, value);
				}
			}
		}
		public virtual string s_UnitsInStock
		{
			get
			{
				return this.IsColumnNull(ProductsSchema.UnitsInStock.FieldName) ? string.Empty : base.GetShortAsString(ProductsSchema.UnitsInStock.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(ProductsSchema.UnitsInStock.FieldName);
				}
				else
				{
					this.UnitsInStock = base.SetShortAsString(ProductsSchema.UnitsInStock.FieldName, value);
				}
			}
		}
		public virtual string s_UnitsOnOrder
		{
			get
			{
				return this.IsColumnNull(ProductsSchema.UnitsOnOrder.FieldName) ? string.Empty : base.GetShortAsString(ProductsSchema.UnitsOnOrder.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(ProductsSchema.UnitsOnOrder.FieldName);
				}
				else
				{
					this.UnitsOnOrder = base.SetShortAsString(ProductsSchema.UnitsOnOrder.FieldName, value);
				}
			}
		}
		public virtual string s_ReorderLevel
		{
			get
			{
				return this.IsColumnNull(ProductsSchema.ReorderLevel.FieldName) ? string.Empty : base.GetShortAsString(ProductsSchema.ReorderLevel.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(ProductsSchema.ReorderLevel.FieldName);
				}
				else
				{
					this.ReorderLevel = base.SetShortAsString(ProductsSchema.ReorderLevel.FieldName, value);
				}
			}
		}
		public virtual string s_Discontinued
		{
			get
			{
				return this.IsColumnNull(ProductsSchema.Discontinued.FieldName) ? string.Empty : base.GetBooleanAsString(ProductsSchema.Discontinued.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(ProductsSchema.Discontinued.FieldName);
				}
				else
				{
					this.Discontinued = base.SetBooleanAsString(ProductsSchema.Discontinued.FieldName, value);
				}
			}
		}
#pragma warning restore IDE1006 // Naming Styles
		#endregion
			
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}

				public WhereParameter ProductID
				{
					get
					{
						WhereParameter wp = new WhereParameter(ProductsSchema.ProductID);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter ProductName
				{
					get
					{
						WhereParameter wp = new WhereParameter(ProductsSchema.ProductName);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter SupplierID
				{
					get
					{
						WhereParameter wp = new WhereParameter(ProductsSchema.SupplierID);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter CategoryID
				{
					get
					{
						WhereParameter wp = new WhereParameter(ProductsSchema.CategoryID);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter QuantityPerUnit
				{
					get
					{
						WhereParameter wp = new WhereParameter(ProductsSchema.QuantityPerUnit);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter UnitPrice
				{
					get
					{
						WhereParameter wp = new WhereParameter(ProductsSchema.UnitPrice);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter UnitsInStock
				{
					get
					{
						WhereParameter wp = new WhereParameter(ProductsSchema.UnitsInStock);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter UnitsOnOrder
				{
					get
					{
						WhereParameter wp = new WhereParameter(ProductsSchema.UnitsOnOrder);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter ReorderLevel
				{
					get
					{
						WhereParameter wp = new WhereParameter(ProductsSchema.ReorderLevel);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter Discontinued
				{
					get
					{
						WhereParameter wp = new WhereParameter(ProductsSchema.Discontinued);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				private WhereClause _clause;
			}
			#endregion

			public WhereParameter ProductID => _ProductID_W ?? (_ProductID_W = TearOff.ProductID);
			public WhereParameter ProductName => _ProductName_W ?? (_ProductName_W = TearOff.ProductName);
			public WhereParameter SupplierID => _SupplierID_W ?? (_SupplierID_W = TearOff.SupplierID);
			public WhereParameter CategoryID => _CategoryID_W ?? (_CategoryID_W = TearOff.CategoryID);
			public WhereParameter QuantityPerUnit => _QuantityPerUnit_W ?? (_QuantityPerUnit_W = TearOff.QuantityPerUnit);
			public WhereParameter UnitPrice => _UnitPrice_W ?? (_UnitPrice_W = TearOff.UnitPrice);
			public WhereParameter UnitsInStock => _UnitsInStock_W ?? (_UnitsInStock_W = TearOff.UnitsInStock);
			public WhereParameter UnitsOnOrder => _UnitsOnOrder_W ?? (_UnitsOnOrder_W = TearOff.UnitsOnOrder);
			public WhereParameter ReorderLevel => _ReorderLevel_W ?? (_ReorderLevel_W = TearOff.ReorderLevel);
			public WhereParameter Discontinued => _Discontinued_W ?? (_Discontinued_W = TearOff.Discontinued);

			private WhereParameter _ProductID_W = null;
			private WhereParameter _ProductName_W = null;
			private WhereParameter _SupplierID_W = null;
			private WhereParameter _CategoryID_W = null;
			private WhereParameter _QuantityPerUnit_W = null;
			private WhereParameter _UnitPrice_W = null;
			private WhereParameter _UnitsInStock_W = null;
			private WhereParameter _UnitsOnOrder_W = null;
			private WhereParameter _ReorderLevel_W = null;
			private WhereParameter _Discontinued_W = null;
						
			public void WhereClauseReset()
			{
				_ProductID_W = null;
				_ProductName_W = null;
				_SupplierID_W = null;
				_CategoryID_W = null;
				_QuantityPerUnit_W = null;
				_UnitPrice_W = null;
				_UnitsInStock_W = null;
				_UnitsOnOrder_W = null;
				_ReorderLevel_W = null;
				_Discontinued_W = null;
 	
				this._entity.Query.FlushWhereParameters();
			}

			private EasyObject _entity;
			private TearOffWhereParameter _tearOff;			
		}
	
        public WhereClause Where => _whereClause ?? (_whereClause = new WhereClause(this));
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
            public AggregateClause(EasyObject entity) => this._entity = entity;

            public TearOffAggregateParameter TearOff => _tearOff ?? (_tearOff = new TearOffAggregateParameter(this));

			#region TearOff's
			public class TearOffAggregateParameter
			{
                public TearOffAggregateParameter(AggregateClause clause) => this._clause = clause;
				
				public AggregateParameter ProductID
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(ProductsSchema.ProductID);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter ProductName
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(ProductsSchema.ProductName);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter SupplierID
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(ProductsSchema.SupplierID);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter CategoryID
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(ProductsSchema.CategoryID);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter QuantityPerUnit
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(ProductsSchema.QuantityPerUnit);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter UnitPrice
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(ProductsSchema.UnitPrice);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter UnitsInStock
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(ProductsSchema.UnitsInStock);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter UnitsOnOrder
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(ProductsSchema.UnitsOnOrder);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter ReorderLevel
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(ProductsSchema.ReorderLevel);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter Discontinued
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(ProductsSchema.Discontinued);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				private AggregateClause _clause;
			}
			#endregion
			public AggregateParameter ProductID => _ProductID_W ?? (_ProductID_W = TearOff.ProductID);
			public AggregateParameter ProductName => _ProductName_W ?? (_ProductName_W = TearOff.ProductName);
			public AggregateParameter SupplierID => _SupplierID_W ?? (_SupplierID_W = TearOff.SupplierID);
			public AggregateParameter CategoryID => _CategoryID_W ?? (_CategoryID_W = TearOff.CategoryID);
			public AggregateParameter QuantityPerUnit => _QuantityPerUnit_W ?? (_QuantityPerUnit_W = TearOff.QuantityPerUnit);
			public AggregateParameter UnitPrice => _UnitPrice_W ?? (_UnitPrice_W = TearOff.UnitPrice);
			public AggregateParameter UnitsInStock => _UnitsInStock_W ?? (_UnitsInStock_W = TearOff.UnitsInStock);
			public AggregateParameter UnitsOnOrder => _UnitsOnOrder_W ?? (_UnitsOnOrder_W = TearOff.UnitsOnOrder);
			public AggregateParameter ReorderLevel => _ReorderLevel_W ?? (_ReorderLevel_W = TearOff.ReorderLevel);
			public AggregateParameter Discontinued => _Discontinued_W ?? (_Discontinued_W = TearOff.Discontinued);

			private AggregateParameter _ProductID_W = null;
			private AggregateParameter _ProductName_W = null;
			private AggregateParameter _SupplierID_W = null;
			private AggregateParameter _CategoryID_W = null;
			private AggregateParameter _QuantityPerUnit_W = null;
			private AggregateParameter _UnitPrice_W = null;
			private AggregateParameter _UnitsInStock_W = null;
			private AggregateParameter _UnitsOnOrder_W = null;
			private AggregateParameter _ReorderLevel_W = null;
			private AggregateParameter _Discontinued_W = null;
			public void AggregateClauseReset()
			{
				_ProductID_W = null;
				_ProductName_W = null;
				_SupplierID_W = null;
				_CategoryID_W = null;
				_QuantityPerUnit_W = null;
				_UnitPrice_W = null;
				_UnitsInStock_W = null;
				_UnitsOnOrder_W = null;
				_ReorderLevel_W = null;
				_Discontinued_W = null;
 	
				this._entity.Query.FlushAggregateParameters();
			}

			private EasyObject _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
        public AggregateClause Aggregate => _aggregateClause ?? (_aggregateClause = new AggregateClause(this));
		
		private AggregateClause _aggregateClause = null;
		#endregion
	}

    /// <summary>
    /// A class which represents the Products table
    /// </summary>
	[Table("Products")]
	public partial class ProductsModel
	{
		[Key]
		public virtual int ProductID { get; set; }
		public virtual string ProductName { get; set; }
		public virtual int? SupplierID { get; set; }
		public virtual int? CategoryID { get; set; }
		public virtual string QuantityPerUnit { get; set; }
		public virtual decimal? UnitPrice { get; set; }
		public virtual short? UnitsInStock { get; set; }
		public virtual short? UnitsOnOrder { get; set; }
		public virtual short? ReorderLevel { get; set; }
		public virtual bool Discontinued { get; set; }
	}
}
