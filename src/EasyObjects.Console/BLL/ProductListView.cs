/*
'===============================================================================
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by T4 Template

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Data;
using NCI.EasyObjects;

namespace EasyObjects.Console.BLL
{
    public class AlphabeticalListOfProductsSchema : NCI.EasyObjects.Schema
    {
        private static List<SchemaItem> _entries;
		public static SchemaItem ProductID = new SchemaItem("ProductID", DbType.Int32, false, false, false, false, false, false);
		public static SchemaItem ProductName = new SchemaItem("ProductName", DbType.String, SchemaItemJustify.None, 40, false, false, false, false);
		public static SchemaItem SupplierID = new SchemaItem("SupplierID", DbType.Int32, false, true, false, false, false, false);
		public static SchemaItem CategoryID = new SchemaItem("CategoryID", DbType.Int32, false, true, false, false, false, false);
		public static SchemaItem QuantityPerUnit = new SchemaItem("QuantityPerUnit", DbType.String, SchemaItemJustify.None, 20, true, false, false, false);
		public static SchemaItem UnitPrice = new SchemaItem("UnitPrice", DbType.Decimal, false, true, false, false, false, false);
		public static SchemaItem UnitsInStock = new SchemaItem("UnitsInStock", DbType.Int16, false, true, false, false, false, false);
		public static SchemaItem UnitsOnOrder = new SchemaItem("UnitsOnOrder", DbType.Int16, false, true, false, false, false, false);
		public static SchemaItem ReorderLevel = new SchemaItem("ReorderLevel", DbType.Int16, false, true, false, false, false, false);
		public static SchemaItem Discontinued = new SchemaItem("Discontinued", DbType.Boolean, false, false, false, false, false, false);
		public static SchemaItem CategoryName = new SchemaItem("CategoryName", DbType.String, SchemaItemJustify.None, 15, false, false, false, false);
        
		public override List<SchemaItem> SchemaEntries
        {
            get
            {
                if (_entries == null || _entries.Count == 0)
                {
                    _entries = new List<SchemaItem>
                    {
                        AlphabeticalListOfProductsSchema.ProductID,
                        AlphabeticalListOfProductsSchema.ProductName,
                        AlphabeticalListOfProductsSchema.SupplierID,
                        AlphabeticalListOfProductsSchema.CategoryID,
                        AlphabeticalListOfProductsSchema.QuantityPerUnit,
                        AlphabeticalListOfProductsSchema.UnitPrice,
                        AlphabeticalListOfProductsSchema.UnitsInStock,
                        AlphabeticalListOfProductsSchema.UnitsOnOrder,
                        AlphabeticalListOfProductsSchema.ReorderLevel,
                        AlphabeticalListOfProductsSchema.Discontinued,
                        AlphabeticalListOfProductsSchema.CategoryName,
                    };
                }

                return _entries;
            }
        }

        public static bool HasAutoKey { get => false; }
        public static bool HasRowID { get => false; }
	}

	public class AlphabeticalListOfProducts : EasyObject
	{
		public AlphabeticalListOfProducts()
		{
			AlphabeticalListOfProductsSchema _schema = new AlphabeticalListOfProductsSchema();
			this.SchemaEntries = _schema.SchemaEntries;
			this.SchemaGlobal = "dbo";
		}	
		
		public override void FlushData()
		{
			this._whereClause = null;
			this._aggregateClause = null;
			base.FlushData();
		}

		/// <summary>
		/// Loads all records from the table.
		/// </summary>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadAll() 
		{
			this.Query.ClearAll();
			this.Where.WhereClauseReset();
			return this.Query.Load();
		}
	
		#region Properties
		public virtual int ProductID
		{
			get
			{
				return this.GetInteger(AlphabeticalListOfProductsSchema.ProductID.FieldName);
	    	}
			set
			{
				this.SetInteger(AlphabeticalListOfProductsSchema.ProductID.FieldName, value);
			}
		}
		public virtual string ProductName
		{
			get
			{
				return this.GetString(AlphabeticalListOfProductsSchema.ProductName.FieldName);
	    	}
			set
			{
				this.SetString(AlphabeticalListOfProductsSchema.ProductName.FieldName, value);
			}
		}
		public virtual int SupplierID
		{
			get
			{
				return this.GetInteger(AlphabeticalListOfProductsSchema.SupplierID.FieldName);
	    	}
			set
			{
				this.SetInteger(AlphabeticalListOfProductsSchema.SupplierID.FieldName, value);
			}
		}
		public virtual int CategoryID
		{
			get
			{
				return this.GetInteger(AlphabeticalListOfProductsSchema.CategoryID.FieldName);
	    	}
			set
			{
				this.SetInteger(AlphabeticalListOfProductsSchema.CategoryID.FieldName, value);
			}
		}
		public virtual string QuantityPerUnit
		{
			get
			{
				return this.GetString(AlphabeticalListOfProductsSchema.QuantityPerUnit.FieldName);
	    	}
			set
			{
				this.SetString(AlphabeticalListOfProductsSchema.QuantityPerUnit.FieldName, value);
			}
		}
		public virtual decimal UnitPrice
		{
			get
			{
				return this.GetDecimal(AlphabeticalListOfProductsSchema.UnitPrice.FieldName);
	    	}
			set
			{
				this.SetDecimal(AlphabeticalListOfProductsSchema.UnitPrice.FieldName, value);
			}
		}
		public virtual short UnitsInStock
		{
			get
			{
				return this.GetShort(AlphabeticalListOfProductsSchema.UnitsInStock.FieldName);
	    	}
			set
			{
				this.SetShort(AlphabeticalListOfProductsSchema.UnitsInStock.FieldName, value);
			}
		}
		public virtual short UnitsOnOrder
		{
			get
			{
				return this.GetShort(AlphabeticalListOfProductsSchema.UnitsOnOrder.FieldName);
	    	}
			set
			{
				this.SetShort(AlphabeticalListOfProductsSchema.UnitsOnOrder.FieldName, value);
			}
		}
		public virtual short ReorderLevel
		{
			get
			{
				return this.GetShort(AlphabeticalListOfProductsSchema.ReorderLevel.FieldName);
	    	}
			set
			{
				this.SetShort(AlphabeticalListOfProductsSchema.ReorderLevel.FieldName, value);
			}
		}
		public virtual bool Discontinued
		{
			get
			{
				return this.GetBoolean(AlphabeticalListOfProductsSchema.Discontinued.FieldName);
	    	}
			set
			{
				this.SetBoolean(AlphabeticalListOfProductsSchema.Discontinued.FieldName, value);
			}
		}
		public virtual string CategoryName
		{
			get
			{
				return this.GetString(AlphabeticalListOfProductsSchema.CategoryName.FieldName);
	    	}
			set
			{
				this.SetString(AlphabeticalListOfProductsSchema.CategoryName.FieldName, value);
			}
		}
		public override string TableName
		{
			get { return "Alphabetical list of products"; }
		}
		
		#endregion

		#region String Properties
#pragma warning disable IDE1006 // Naming Styles
		public virtual string s_ProductID
		{
			get
			{
				return this.IsColumnNull(AlphabeticalListOfProductsSchema.ProductID.FieldName) ? string.Empty : base.GetIntegerAsString(AlphabeticalListOfProductsSchema.ProductID.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(AlphabeticalListOfProductsSchema.ProductID.FieldName);
				}
				else
				{
					this.ProductID = base.SetIntegerAsString(AlphabeticalListOfProductsSchema.ProductID.FieldName, value);
				}
			}
		}
		public virtual string s_ProductName
		{
			get
			{
				return this.IsColumnNull(AlphabeticalListOfProductsSchema.ProductName.FieldName) ? string.Empty : base.GetStringAsString(AlphabeticalListOfProductsSchema.ProductName.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(AlphabeticalListOfProductsSchema.ProductName.FieldName);
				}
				else
				{
					this.ProductName = base.SetStringAsString(AlphabeticalListOfProductsSchema.ProductName.FieldName, value);
				}
			}
		}
		public virtual string s_SupplierID
		{
			get
			{
				return this.IsColumnNull(AlphabeticalListOfProductsSchema.SupplierID.FieldName) ? string.Empty : base.GetIntegerAsString(AlphabeticalListOfProductsSchema.SupplierID.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(AlphabeticalListOfProductsSchema.SupplierID.FieldName);
				}
				else
				{
					this.SupplierID = base.SetIntegerAsString(AlphabeticalListOfProductsSchema.SupplierID.FieldName, value);
				}
			}
		}
		public virtual string s_CategoryID
		{
			get
			{
				return this.IsColumnNull(AlphabeticalListOfProductsSchema.CategoryID.FieldName) ? string.Empty : base.GetIntegerAsString(AlphabeticalListOfProductsSchema.CategoryID.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(AlphabeticalListOfProductsSchema.CategoryID.FieldName);
				}
				else
				{
					this.CategoryID = base.SetIntegerAsString(AlphabeticalListOfProductsSchema.CategoryID.FieldName, value);
				}
			}
		}
		public virtual string s_QuantityPerUnit
		{
			get
			{
				return this.IsColumnNull(AlphabeticalListOfProductsSchema.QuantityPerUnit.FieldName) ? string.Empty : base.GetStringAsString(AlphabeticalListOfProductsSchema.QuantityPerUnit.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(AlphabeticalListOfProductsSchema.QuantityPerUnit.FieldName);
				}
				else
				{
					this.QuantityPerUnit = base.SetStringAsString(AlphabeticalListOfProductsSchema.QuantityPerUnit.FieldName, value);
				}
			}
		}
		public virtual string s_UnitPrice
		{
			get
			{
				return this.IsColumnNull(AlphabeticalListOfProductsSchema.UnitPrice.FieldName) ? string.Empty : base.GetDecimalAsString(AlphabeticalListOfProductsSchema.UnitPrice.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(AlphabeticalListOfProductsSchema.UnitPrice.FieldName);
				}
				else
				{
					this.UnitPrice = base.SetDecimalAsString(AlphabeticalListOfProductsSchema.UnitPrice.FieldName, value);
				}
			}
		}
		public virtual string s_UnitsInStock
		{
			get
			{
				return this.IsColumnNull(AlphabeticalListOfProductsSchema.UnitsInStock.FieldName) ? string.Empty : base.GetShortAsString(AlphabeticalListOfProductsSchema.UnitsInStock.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(AlphabeticalListOfProductsSchema.UnitsInStock.FieldName);
				}
				else
				{
					this.UnitsInStock = base.SetShortAsString(AlphabeticalListOfProductsSchema.UnitsInStock.FieldName, value);
				}
			}
		}
		public virtual string s_UnitsOnOrder
		{
			get
			{
				return this.IsColumnNull(AlphabeticalListOfProductsSchema.UnitsOnOrder.FieldName) ? string.Empty : base.GetShortAsString(AlphabeticalListOfProductsSchema.UnitsOnOrder.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(AlphabeticalListOfProductsSchema.UnitsOnOrder.FieldName);
				}
				else
				{
					this.UnitsOnOrder = base.SetShortAsString(AlphabeticalListOfProductsSchema.UnitsOnOrder.FieldName, value);
				}
			}
		}
		public virtual string s_ReorderLevel
		{
			get
			{
				return this.IsColumnNull(AlphabeticalListOfProductsSchema.ReorderLevel.FieldName) ? string.Empty : base.GetShortAsString(AlphabeticalListOfProductsSchema.ReorderLevel.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(AlphabeticalListOfProductsSchema.ReorderLevel.FieldName);
				}
				else
				{
					this.ReorderLevel = base.SetShortAsString(AlphabeticalListOfProductsSchema.ReorderLevel.FieldName, value);
				}
			}
		}
		public virtual string s_Discontinued
		{
			get
			{
				return this.IsColumnNull(AlphabeticalListOfProductsSchema.Discontinued.FieldName) ? string.Empty : base.GetBooleanAsString(AlphabeticalListOfProductsSchema.Discontinued.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(AlphabeticalListOfProductsSchema.Discontinued.FieldName);
				}
				else
				{
					this.Discontinued = base.SetBooleanAsString(AlphabeticalListOfProductsSchema.Discontinued.FieldName, value);
				}
			}
		}
		public virtual string s_CategoryName
		{
			get
			{
				return this.IsColumnNull(AlphabeticalListOfProductsSchema.CategoryName.FieldName) ? string.Empty : base.GetStringAsString(AlphabeticalListOfProductsSchema.CategoryName.FieldName);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(AlphabeticalListOfProductsSchema.CategoryName.FieldName);
				}
				else
				{
					this.CategoryName = base.SetStringAsString(AlphabeticalListOfProductsSchema.CategoryName.FieldName, value);
				}
			}
		}
#pragma warning restore IDE1006 // Naming Styles
		#endregion
			
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}

				public WhereParameter ProductID
				{
					get
					{
						WhereParameter wp = new WhereParameter(AlphabeticalListOfProductsSchema.ProductID);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter ProductName
				{
					get
					{
						WhereParameter wp = new WhereParameter(AlphabeticalListOfProductsSchema.ProductName);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter SupplierID
				{
					get
					{
						WhereParameter wp = new WhereParameter(AlphabeticalListOfProductsSchema.SupplierID);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter CategoryID
				{
					get
					{
						WhereParameter wp = new WhereParameter(AlphabeticalListOfProductsSchema.CategoryID);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter QuantityPerUnit
				{
					get
					{
						WhereParameter wp = new WhereParameter(AlphabeticalListOfProductsSchema.QuantityPerUnit);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter UnitPrice
				{
					get
					{
						WhereParameter wp = new WhereParameter(AlphabeticalListOfProductsSchema.UnitPrice);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter UnitsInStock
				{
					get
					{
						WhereParameter wp = new WhereParameter(AlphabeticalListOfProductsSchema.UnitsInStock);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter UnitsOnOrder
				{
					get
					{
						WhereParameter wp = new WhereParameter(AlphabeticalListOfProductsSchema.UnitsOnOrder);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter ReorderLevel
				{
					get
					{
						WhereParameter wp = new WhereParameter(AlphabeticalListOfProductsSchema.ReorderLevel);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter Discontinued
				{
					get
					{
						WhereParameter wp = new WhereParameter(AlphabeticalListOfProductsSchema.Discontinued);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				public WhereParameter CategoryName
				{
					get
					{
						WhereParameter wp = new WhereParameter(AlphabeticalListOfProductsSchema.CategoryName);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
				private WhereClause _clause;
			}
			#endregion

			public WhereParameter ProductID => _ProductID_W ?? (_ProductID_W = TearOff.ProductID);
			public WhereParameter ProductName => _ProductName_W ?? (_ProductName_W = TearOff.ProductName);
			public WhereParameter SupplierID => _SupplierID_W ?? (_SupplierID_W = TearOff.SupplierID);
			public WhereParameter CategoryID => _CategoryID_W ?? (_CategoryID_W = TearOff.CategoryID);
			public WhereParameter QuantityPerUnit => _QuantityPerUnit_W ?? (_QuantityPerUnit_W = TearOff.QuantityPerUnit);
			public WhereParameter UnitPrice => _UnitPrice_W ?? (_UnitPrice_W = TearOff.UnitPrice);
			public WhereParameter UnitsInStock => _UnitsInStock_W ?? (_UnitsInStock_W = TearOff.UnitsInStock);
			public WhereParameter UnitsOnOrder => _UnitsOnOrder_W ?? (_UnitsOnOrder_W = TearOff.UnitsOnOrder);
			public WhereParameter ReorderLevel => _ReorderLevel_W ?? (_ReorderLevel_W = TearOff.ReorderLevel);
			public WhereParameter Discontinued => _Discontinued_W ?? (_Discontinued_W = TearOff.Discontinued);
			public WhereParameter CategoryName => _CategoryName_W ?? (_CategoryName_W = TearOff.CategoryName);

			private WhereParameter _ProductID_W = null;
			private WhereParameter _ProductName_W = null;
			private WhereParameter _SupplierID_W = null;
			private WhereParameter _CategoryID_W = null;
			private WhereParameter _QuantityPerUnit_W = null;
			private WhereParameter _UnitPrice_W = null;
			private WhereParameter _UnitsInStock_W = null;
			private WhereParameter _UnitsOnOrder_W = null;
			private WhereParameter _ReorderLevel_W = null;
			private WhereParameter _Discontinued_W = null;
			private WhereParameter _CategoryName_W = null;
						
			public void WhereClauseReset()
			{
				_ProductID_W = null;
				_ProductName_W = null;
				_SupplierID_W = null;
				_CategoryID_W = null;
				_QuantityPerUnit_W = null;
				_UnitPrice_W = null;
				_UnitsInStock_W = null;
				_UnitsOnOrder_W = null;
				_ReorderLevel_W = null;
				_Discontinued_W = null;
				_CategoryName_W = null;
 	
				this._entity.Query.FlushWhereParameters();
			}

			private EasyObject _entity;
			private TearOffWhereParameter _tearOff;			
		}
	
        public WhereClause Where => _whereClause ?? (_whereClause = new WhereClause(this));
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
            public AggregateClause(EasyObject entity) => this._entity = entity;

            public TearOffAggregateParameter TearOff => _tearOff ?? (_tearOff = new TearOffAggregateParameter(this));

			#region TearOff's
			public class TearOffAggregateParameter
			{
                public TearOffAggregateParameter(AggregateClause clause) => this._clause = clause;
				
				public AggregateParameter ProductID
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AlphabeticalListOfProductsSchema.ProductID);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter ProductName
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AlphabeticalListOfProductsSchema.ProductName);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter SupplierID
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AlphabeticalListOfProductsSchema.SupplierID);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter CategoryID
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AlphabeticalListOfProductsSchema.CategoryID);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter QuantityPerUnit
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AlphabeticalListOfProductsSchema.QuantityPerUnit);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter UnitPrice
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AlphabeticalListOfProductsSchema.UnitPrice);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter UnitsInStock
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AlphabeticalListOfProductsSchema.UnitsInStock);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter UnitsOnOrder
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AlphabeticalListOfProductsSchema.UnitsOnOrder);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter ReorderLevel
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AlphabeticalListOfProductsSchema.ReorderLevel);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter Discontinued
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AlphabeticalListOfProductsSchema.Discontinued);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				public AggregateParameter CategoryName
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(AlphabeticalListOfProductsSchema.CategoryName);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
				private AggregateClause _clause;
			}
			#endregion
			public AggregateParameter ProductID => _ProductID_W ?? (_ProductID_W = TearOff.ProductID);
			public AggregateParameter ProductName => _ProductName_W ?? (_ProductName_W = TearOff.ProductName);
			public AggregateParameter SupplierID => _SupplierID_W ?? (_SupplierID_W = TearOff.SupplierID);
			public AggregateParameter CategoryID => _CategoryID_W ?? (_CategoryID_W = TearOff.CategoryID);
			public AggregateParameter QuantityPerUnit => _QuantityPerUnit_W ?? (_QuantityPerUnit_W = TearOff.QuantityPerUnit);
			public AggregateParameter UnitPrice => _UnitPrice_W ?? (_UnitPrice_W = TearOff.UnitPrice);
			public AggregateParameter UnitsInStock => _UnitsInStock_W ?? (_UnitsInStock_W = TearOff.UnitsInStock);
			public AggregateParameter UnitsOnOrder => _UnitsOnOrder_W ?? (_UnitsOnOrder_W = TearOff.UnitsOnOrder);
			public AggregateParameter ReorderLevel => _ReorderLevel_W ?? (_ReorderLevel_W = TearOff.ReorderLevel);
			public AggregateParameter Discontinued => _Discontinued_W ?? (_Discontinued_W = TearOff.Discontinued);
			public AggregateParameter CategoryName => _CategoryName_W ?? (_CategoryName_W = TearOff.CategoryName);

			private AggregateParameter _ProductID_W = null;
			private AggregateParameter _ProductName_W = null;
			private AggregateParameter _SupplierID_W = null;
			private AggregateParameter _CategoryID_W = null;
			private AggregateParameter _QuantityPerUnit_W = null;
			private AggregateParameter _UnitPrice_W = null;
			private AggregateParameter _UnitsInStock_W = null;
			private AggregateParameter _UnitsOnOrder_W = null;
			private AggregateParameter _ReorderLevel_W = null;
			private AggregateParameter _Discontinued_W = null;
			private AggregateParameter _CategoryName_W = null;
			public void AggregateClauseReset()
			{
				_ProductID_W = null;
				_ProductName_W = null;
				_SupplierID_W = null;
				_CategoryID_W = null;
				_QuantityPerUnit_W = null;
				_UnitPrice_W = null;
				_UnitsInStock_W = null;
				_UnitsOnOrder_W = null;
				_ReorderLevel_W = null;
				_Discontinued_W = null;
				_CategoryName_W = null;
 	
				this._entity.Query.FlushAggregateParameters();
			}

			private EasyObject _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
        public AggregateClause Aggregate => _aggregateClause ?? (_aggregateClause = new AggregateClause(this));
		
		private AggregateClause _aggregateClause = null;
		#endregion
	}
}
