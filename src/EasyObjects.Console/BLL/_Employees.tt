<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Linq.dll" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#
    var server = new Server(".\\SQLEXPRESS");
    var database = new Database(server, "Northwind");
    var table = new Table(database, "Employees");
    table.Refresh();
#>
/*
'===============================================================================
'  
'  This object is 'abstract' which means you need to inherit from it to be able
'  to instantiate it.  This is very easily done. You can override properties and
'  methods in your derived class, this allows you to regenerate this class at any
'  time and not worry about overwriting custom code. 
'
'  NEVER EDIT THIS FILE.
'
'  public class YourObject :  _YourObject
'  {
'
'  }
'
'===============================================================================
*/

// Generated by T4 Template

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using NCI.EasyObjects;

namespace EasyObjects.Console.BLL
{
    public class <#= table.Name #>Schema : NCI.EasyObjects.Schema
    {
        private static List<SchemaItem> _entries;
<#
	PushIndent("\t\t");
	foreach (Column column in table.Columns)
    {
		if (GetSystemType(column) == "string")
        {
			WriteLine("public static SchemaItem " + column.Name + " = new SchemaItem(\"" + column.Name + "\", " + GetDbType(column) + ", SchemaItemJustify.None, " + GetColumnSize(column) + ", " + column.Nullable.ToString().ToLower() + ", " + column.InPrimaryKey.ToString().ToLower() + ", " + column.IsForeignKey.ToString().ToLower() + ", " + (string.IsNullOrWhiteSpace(column.Default) ? "false" : "true") + ");");
        }
		else
        {
			WriteLine("public static SchemaItem " + column.Name + " = new SchemaItem(\"" + column.Name + "\", " + GetDbType(column) + ", " + column.Identity.ToString().ToLower() + ", " + column.Nullable.ToString().ToLower() + ", " + column.Computed.ToString().ToLower() + ", " + column.InPrimaryKey.ToString().ToLower() + ", " + column.IsForeignKey.ToString().ToLower() + ", " + (string.IsNullOrWhiteSpace(column.Default) ? "false" : "true") + ");");
        }
    }
	PopIndent();
#>        
		public override List<SchemaItem> SchemaEntries
        {
            get
            {
                if (_entries == null || _entries.Count == 0)
                {
                    _entries = new List<SchemaItem>
                    {
<#foreach (Column column in table.Columns)
{#>
                        <#= table.Name #>Schema.<#= column.Name #>,
<#}#>
                    };
                }

                return _entries;
            }
        }

        public static bool HasAutoKey { get => <#= HasAutoKey(table.Columns).ToString().ToLower() #>; }
        public static bool HasRowID { get => false; }
	}
	
	public abstract class _<#= table.Name #> : EasyObject
	{

		public _<#= table.Name #>()
		{
			<#= table.Name #>Schema _schema = new <#= table.Name #>Schema();
			this.SchemaEntries = _schema.SchemaEntries;
			this.SchemaGlobal = "<#= table.Schema #>";
		}
		
		public override void FlushData() 	 
		{ 	 
			this._whereClause = null; 	 
			this._aggregateClause = null; 	 
			base.FlushData(); 	 
		}
			   
		/// <summary>
		/// Loads the business object with info from the database, based on the requested primary key.
		/// </summary>
<#
	PushIndent("\t\t");
	foreach (Column column in table.Columns)
    {
		if (!column.InPrimaryKey) continue;
		WriteLine("/// <param name=\"" + FormatColumnName(column) + "\">" + column.ExtendedProperties["MS_Description"] + "</param>");
    }
	PopIndent();
#>		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadByPrimaryKey(<#
	bool first = true;
	foreach (Column column in table.Columns)
    {
		if (!column.InPrimaryKey) continue;
		if (!first)
        {
			Write(", ");
        }
		Write(GetSystemType(column) + " " + FormatColumnName(column));
		first = false;
    }
#>)
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					ListDictionary parameters = new ListDictionary
					{
<#
	PushIndent("\t\t\t\t\t\t");
	foreach (Column column in table.Columns)
    {
		if (!column.InPrimaryKey) continue;
		WriteLine("{ " + table.Name + "Schema." + column.Name + ".FieldName, " + FormatColumnName(column) + " },");
    }
	PopIndent();
#>					};

					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "<#= CreateProcedureName(table, "K") #>", parameters, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
<#
	PushIndent("\t\t\t\t\t");
	foreach (Column column in table.Columns)
    {
		if (!column.InPrimaryKey) continue;
		WriteLine("this.Where." + column.Name + ".Value = " + FormatColumnName(column) + ";");
    }
	PopIndent();
#>					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}
	
		/// <summary>
		/// Loads all records from the table.
		/// </summary>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadAll()
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "<#= CreateProcedureName(table, "L") #>", null, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		/// <summary>
		/// Adds a new record to the internal table.
		/// </summary>
		public override void AddNew()
		{
			base.AddNew();
			this.ApplyDefaults();
		}

		/// <summary>
		/// Apply any default values to columns
		/// </summary>
		protected override void ApplyDefaults()
		{
<#
	PushIndent("\t\t\t");
	foreach (Column column in table.Columns)
    {
		string defaultValue = column.Default.Replace("(", "").Replace(")", "").Replace("\r\n", " ");
		switch (defaultValue.ToLower())
        {
			case "newid":
			case "genguid":
				WriteLine("this." + column.Name + " = Guid.NewGuid();");
				break;
			case "getdate":
			case "sysdate":
				WriteLine("this." + column.Name + " = DateTime.Now;");
				break;
			default:
				if (string.IsNullOrWhiteSpace(defaultValue)) continue;
				WriteLine("//this." + column.Name + " = \"" + defaultValue + "\";");
				break;
        }		
    }
	PopIndent();
#>		}

		protected override DbCommand GetInsertCommand(CommandType commandType)
		{	
			DbCommand dbCommand;

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "<#= CreateProcedureName(table, "I") #>";
                    dbCommand = new SqlCommand
                    {
                        CommandType = CommandType.StoredProcedure,
                        CommandText = sqlCommand,
                        CommandTimeout = CommandTimeout > 0 ? CommandTimeout : 0
                    };

<#
	PushIndent("\t\t\t\t\t");
	foreach (Column column in table.Columns)
    {
		if (!column.InPrimaryKey) continue;
		if (column.Identity)
        {
			WriteLine("base.AddParameter(dbCommand, \"" + column.Name + "\", " + GetDbType(column) + ", " + GetColumnSize(column) + ", ParameterDirection.Output, true, 0, 0, \"" + column.Name + "\", DataRowVersion.Default, Convert.DBNull);");
        }
    }
	PopIndent();
#>					CreateParameters(dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!item.IsComputed)
						{
							if ((item.IsAutoKey && this.IdentityInsert) || !item.IsAutoKey)
							{
								this.Query.AddInsertColumn(item);
							}
						}
					}
					dbCommand = this.Query.GetInsertCommandWrapper();

					dbCommand.Parameters.Clear();
					if (this.IdentityInsert)
					{
<#
	PushIndent("\t\t\t\t\t\t");
	foreach (Column column in table.Columns)
    {
		if (!column.InPrimaryKey) continue;
		if (column.Identity)
        {
			WriteLine("base.AddInParameter(dbCommand, \"" + column.Name + "\", " + GetDbType(column) + ", \"" + column.Name + "\", DataRowVersion.Default);");
        }
    }
	PopIndent();
#>					}
					else
					{
<#
	PushIndent("\t\t\t\t\t\t");
	foreach (Column column in table.Columns)
    {
		if (!column.InPrimaryKey) continue;
		if (column.Identity)
        {
			WriteLine("base.AddParameter(dbCommand, \"" + column.Name + "\", " + GetDbType(column) + ", " + column.DataType.MaximumLength + ", ParameterDirection.Output, true, 0, 0, \"" + column.Name + "\", DataRowVersion.Default, Convert.DBNull);");
        }
    }
	PopIndent();
#>					}
					CreateParameters(dbCommand);

					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetUpdateCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "<#= CreateProcedureName(table, "U") #>";
                    dbCommand = new SqlCommand
                    {
                        CommandType = CommandType.StoredProcedure,
                        CommandText = sqlCommand,
                        CommandTimeout = CommandTimeout > 0 ? CommandTimeout : 0
                    };

<#
	PushIndent("\t\t\t\t\t");
	foreach (Column column in table.Columns)
    {
		if (!column.InPrimaryKey) continue;
		if (column.Identity)
        {
			WriteLine("base.AddInParameter(dbCommand, \"" + column.Name + "\", " + GetDbType(column) + ", \"" + column.Name + "\", DataRowVersion.Current);");
        }
    }
	PopIndent();
#>					CreateParameters(dbCommand);
					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					foreach(SchemaItem item in this.SchemaEntries)
					{
						if (!(item.IsAutoKey || item.IsComputed))
						{
							this.Query.AddUpdateColumn(item);
						}
					}

					this.Where.WhereClauseReset();
<#
	PushIndent("\t\t\t\t\t");
	foreach (Column column in table.Columns)
    {
		if (column.InPrimaryKey || column.DataType.Name.ToLower() == "timestamp")
        {
			WriteLine("this.Where." + column.Name + ".Operator = WhereParameter.Operand.Equal;");
        }
    }
	PopIndent();
#>					dbCommand = this.Query.GetUpdateCommandWrapper();

					dbCommand.Parameters.Clear();
					CreateParameters(dbCommand);
<#
	PushIndent("\t\t\t\t\t");
	foreach (Column column in table.Columns)
    {
		if (!column.InPrimaryKey) continue;
		if (column.Identity)
        {
			WriteLine("base.AddInParameter(dbCommand, \"" + column.Name + "\", " + GetDbType(column) + ", \"" + column.Name + "\", DataRowVersion.Current);");
        }
    }
	PopIndent();
#>					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		protected override DbCommand GetDeleteCommand(CommandType commandType)
		{
            DbCommand dbCommand;

			switch(commandType)
			{
				case CommandType.StoredProcedure:
					string sqlCommand = this.SchemaStoredProcedureWithSeparator + "<#= CreateProcedureName(table, "D") #>";
                    dbCommand = new SqlCommand
                    {
                        CommandType = CommandType.StoredProcedure,
                        CommandText = sqlCommand,
                        CommandTimeout = CommandTimeout > 0 ? CommandTimeout : 0
                    };

<#
	PushIndent("\t\t\t\t\t");
	foreach (Column column in table.Columns)
    {
		if (column.InPrimaryKey)
        {
			WriteLine("base.AddInParameter(dbCommand, \"" + column.Name + "\", " + GetDbType(column) + ", \"" + column.Name + "\", DataRowVersion.Current);");
        }
    }
	PopIndent();
#>					
					return dbCommand;

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
<#
	PushIndent("\t\t\t\t\t");
	foreach (Column column in table.Columns)
    {
		if (column.InPrimaryKey)
        {
			WriteLine("this.Where." + column.Name + ".Operator = WhereParameter.Operand.Equal;");
        }
    }
	PopIndent();
#>					dbCommand = this.Query.GetDeleteCommandWrapper();

					dbCommand.Parameters.Clear();
<#
	PushIndent("\t\t\t\t\t");
	foreach (Column column in table.Columns)
    {
		if (column.InPrimaryKey)
        {
			WriteLine("base.AddInParameter(dbCommand, \"" + column.Name + "\", " + GetDbType(column) + ", \"" + column.Name + "\", DataRowVersion.Current);");
        }
    }
	PopIndent();
#>					
					return dbCommand;

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		private void CreateParameters(DbCommand dbCommand)
		{
<#
	PushIndent("\t\t\t");
	foreach (Column column in table.Columns)
    {
		bool isAutoKey = column.Identity;
			
		if (column.Computed)
        {
			if (column.DataType.Name.ToLower() == "timestamp")
            {
				WriteLine("base.AddParameter(dbCommand, \"" + column.Name + "\", DbType.Binary, 8, ParameterDirection.InputOutput, false, 0, 0, \"" + column.Name + "\", DataRowVersion.Current, null);");
            }
			else if (GetSystemType(column) == "string")
            {
				WriteLine("base.AddParameter(dbCommand, \"" + column.Name + "\", " + GetDbType(column) + ", " + column.DataType.MaximumLength + ", ParameterDirection.Output, true, 0, 0, \"" + column.Name + "\", DataRowVersion.Current, null);");
            }
			else
            {
				WriteLine("base.AddParameter(dbCommand, \"" + column.Name + "\", " + GetDbType(column) + ", ParameterDirection.Output, \"" + column.Name + "\", DataRowVersion.Current, null);");
            }
        }
		else if (isAutoKey)
        {
			//' Skip auto keys
        }
		else
        {
			WriteLine("base.AddInParameter(dbCommand, \"" + column.Name + "\", " + GetDbType(column) + ", \"" + column.Name + "\", DataRowVersion.Current);");
        }
    }
	PopIndent();
#>		}

		#region Properties
<#
	foreach (Column column in table.Columns)
    {
		string name = column.Name;
		string langType = GetSystemType(column);
		string nativeType = GetNativeType(column);
#>		public virtual <#= langType #> <#= name #>
		{
			get
			{
<#		
		PushIndent("\t\t\t\t");
		if (langType == "byte[]")
        {
			WriteLine("return this.GetByteArray(" + table.Name + "Schema." + name + ".FieldName);");
        }
		else
        {
			WriteLine("return this.Get" + nativeType + "(" + table.Name + "Schema." + name + ".FieldName);");
        }
		PopIndent();
#>	    	}
			set
			{
<#
		PushIndent("\t\t\t\t");
		if (langType == "byte[]")
        {
			WriteLine("this.SetByteArray(" + table.Name + "Schema." + name + ".FieldName, value);");
        }
		else
        {
			WriteLine("this.Set" + nativeType + "(" + table.Name + "Schema." + name + ".FieldName, value);");
        }
		PopIndent();
#>			}
		}
<#
	}
#>
		public override string TableName
		{
			get { return "<#= table.Name #>"; }
		}
		
		#endregion		
		
		#region String Properties
#pragma warning disable IDE1006 // Naming Styles
<#
	foreach (Column column in table.Columns)
    {
		string langType = GetSystemType(column);

		if (langType == "object" || langType.Contains("["))
        {
			continue;
        }

		string name = column.Name;
		string nativeType = GetNativeType(column);
		string fieldName = table.Name + "Schema." + name + ".FieldName";
#>		public virtual string s_<#= name #>
		{
			get
			{
				return this.IsColumnNull(<#= fieldName #>) ? string.Empty : base.Get<#= nativeType #>AsString(<#= fieldName #>);
			}
			set
			{
				if (string.IsNullOrEmpty(value))
				{
					this.SetColumnNull(<#= table.Name #>Schema.<#= name #>.FieldName);
				}
				else
				{
					this.<#= name #> = base.Set<#= nativeType #>AsString(<#= fieldName #>, value);
				}
			}
		}
<#	}
#>#pragma warning restore IDE1006 // Naming Styles
		#endregion
			
		#region Where Clause
		public class WhereClause
		{
			public WhereClause(EasyObject entity)
			{
				this._entity = entity;
			}
			
			public TearOffWhereParameter TearOff
			{
				get
				{
					if(_tearOff == null)
					{
						_tearOff = new TearOffWhereParameter(this);
					}

					return _tearOff;
				}
			}

			#region TearOff's
			public class TearOffWhereParameter
			{
				public TearOffWhereParameter(WhereClause clause)
				{
					this._clause = clause;
				}

<#
	foreach (Column column in table.Columns)
    {
		string name = column.Name;

#>				public WhereParameter <#= name #>
				{
					get
					{
						WhereParameter wp = new WhereParameter(<#= table.Name #>Schema.<#= name #>);
						this._clause._entity.Query.AddWhereParameter(wp);
						return wp;
					}
				}
<#
	}
#>				private WhereClause _clause;
			}
			#endregion

<#
	PushIndent("\t\t\t");
	foreach (Column column in table.Columns)
    {
		string name = column.Name;
		string fldName = string.Format("_{0}_W", name);

		WriteLine("public WhereParameter " + name + " => " + fldName + " ?? (" + fldName + " = TearOff." + name + ");");

	}
	WriteLine("");
	foreach (Column column in table.Columns)
    {
		string name = column.Name;
		string fldName = string.Format("_{0}_W", name);

		WriteLine("private WhereParameter " + fldName + " = null;");
	}
	PopIndent();
#>
						
			public void WhereClauseReset()
			{
<#
	PushIndent("\t\t\t\t");
	foreach (Column column in table.Columns)
    {
		string name = column.Name;
		string fldName = string.Format("_{0}_W", name);

		WriteLine(fldName + " = null;");
	}
	PopIndent();
#> 	
				this._entity.Query.FlushWhereParameters();
			}

			private EasyObject _entity;
			private TearOffWhereParameter _tearOff;			
		}
	
        public WhereClause Where => _whereClause ?? (_whereClause = new WhereClause(this));
		
		private WhereClause _whereClause = null;	
		#endregion
		
		#region Aggregate Clause
		public class AggregateClause
		{
            public AggregateClause(EasyObject entity) => this._entity = entity;

            public TearOffAggregateParameter TearOff => _tearOff ?? (_tearOff = new TearOffAggregateParameter(this));

			#region TearOff's
			public class TearOffAggregateParameter
			{
                public TearOffAggregateParameter(AggregateClause clause) => this._clause = clause;
				
<#
	foreach (Column column in table.Columns)
    {
		string name = column.Name;

#>				public AggregateParameter <#= name #>
				{
					get
					{
						AggregateParameter ap = new AggregateParameter(<#= table.Name #>Schema.<#= name #>);
						this._clause._entity.Query.AddAggregateParameter(ap);
						return ap;
					}
				}
<#
	}
#>				private AggregateClause _clause;
			}
			#endregion
<#
	PushIndent("\t\t\t");
	foreach (Column column in table.Columns)
    {
		string name = column.Name;
		string fldName = string.Format("_{0}_W", name);

		WriteLine("public AggregateParameter " + name + " => " + fldName + " ?? (" + fldName + " = TearOff." + name + ");");

	}
	WriteLine("");
	foreach (Column column in table.Columns)
    {
		string name = column.Name;
		string fldName = string.Format("_{0}_W", name);

		WriteLine("private AggregateParameter " + fldName + " = null;");
	}
	PopIndent();
#>
			public void AggregateClauseReset()
			{
<#
	PushIndent("\t\t\t\t");
	foreach (Column column in table.Columns)
    {
		string name = column.Name;
		string fldName = string.Format("_{0}_W", name);

		WriteLine(fldName + " = null;");
	}
	PopIndent();
#> 	
				this._entity.Query.FlushAggregateParameters();
			}

			private EasyObject _entity;
			private TearOffAggregateParameter _tearOff;
			
		}
	
        public AggregateClause Aggregate => _aggregateClause ?? (_aggregateClause = new AggregateClause(this));
		
		private AggregateClause _aggregateClause = null;
		#endregion
	}

    /// <summary>
    /// A class which represents the <#= table.Name #> table
    /// </summary>
	[Table("<#= table.Name #>")]
	public partial class <#= table.Name #>Model
	{
<#
	PushIndent("\t\t");
	foreach (Column column in table.Columns)
	{
		if (column.InPrimaryKey) 
		{ 
			WriteLine("[Key]");
		}

		WriteLine("public virtual " + GetSystemType(column) + (column.Nullable && !column.DataType.IsStringType && GetSystemType(column) != "byte[]" ? "?" : "") + " " + column.Name + " { get; set; }");
	}
	PopIndent();
#>	}
}
<#+
string FormatColumnName (Column column)
{
	return column.Name.Substring(0, 1).ToLower() + column.Name.Substring(1);
}

bool HasAutoKey (ColumnCollection columns)
{
	foreach (Column column in columns)
    {
		if (column.Identity)
        {
			return true;
        }
    }

	return false;
}

long GetColumnSize (Column column)
{
	string sqlType = column.DataType.Name.ToLower();

	switch (sqlType) 
	{
		case "bigint":
			return sizeof(long);
		case "smallint":
			return sizeof(short);
		case "int":
			return sizeof(int);
		case "uniqueidentifier":
			return column.DataType.MaximumLength;
		case "smalldatetime":
		case "datetime":
		case "datetime2":
		case "date":
		case "time":
			return column.DataType.MaximumLength;
		case "float":
			return sizeof(double);
		case "real":
			return sizeof(Single);
		case "numeric":
		case "smallmoney":
		case "decimal":
		case "money":
			return sizeof(decimal);
		case "tinyint":
			return sizeof(byte);
		case "bit":
			return 1;
		case "image":
		case "binary":
		case "varbinary":
		case "timestamp":
			return column.DataType.MaximumLength;
        case "char":
        case "varchar":
        case "nchar":
        case "nvarchar":
			return column.DataType.MaximumLength;
		case "text":
			return 2147483647;
		case "ntext":
			return 1073741823;
		default:
			return column.DataType.MaximumLength;
	}
}

string GetDbType (Column column)
{
	string sqlType = column.DataType.Name.ToLower();
	string dbType="DbType.String";

	switch (sqlType) 
	{
		case "bigint":
			dbType = "DbType.Int64";
			break;
		case "smallint":
			dbType= "DbType.Int16";
			break;
		case "int":
			dbType= "DbType.Int32";
			break;
		case "uniqueidentifier":
			dbType=  "DbType.Guid";
			break;
		case "smalldatetime":
		case "datetime":
		case "datetime2":
		case "date":
		case "time":
			dbType=  "DbType.DateTime";
			break;
		case "float":
			dbType="DbType.Double";
			break;
		case "real":
			dbType="DbType.Single";
			break;
		case "numeric":
		case "smallmoney":
		case "decimal":
		case "money":
			dbType=  "DbType.Decimal";
			break;
		case "tinyint":
			dbType = "DbType.byte";
			break;
		case "bit":
			dbType=  "DbType.Boolean";
			break;
		case "image":
		case "binary":
		case "varbinary":
		case "timestamp":
			dbType=  "DbType.Binary";
			break;
        case "char":
			dbType=  "DbType.AnsiStringFixedLength";
			break;
        case "varchar":
			dbType=  "DbType.AnsiString";
			break;
        case "nchar":
			dbType=  "DbType.StringFixedLength";
			break;
        case "nvarchar":
			dbType=  "DbType.String";
			break;
	}
	return dbType;
}

string GetSystemType(Column column)
{
	string sqlType = column.DataType.Name.ToLower();
	string sysType="string";

	switch (sqlType) 
	{
		case "bigint":
			sysType = "long";
			break;
		case "smallint":
			sysType= "short";
			break;
		case "int":
			sysType= "int";
			break;
		case "uniqueidentifier":
			sysType=  "Guid";
			break;
		case "smalldatetime":
		case "datetime":
		case "datetime2":
		case "date":
		case "time":
			sysType=  "DateTime";
			break;
		case "float":
			sysType="double";
			break;
		case "real":
			sysType="float";
			break;
		case "numeric":
		case "smallmoney":
		case "decimal":
		case "money":
			sysType=  "decimal";
			break;
		case "tinyint":
			sysType = "byte";
			break;
		case "bit":
			sysType=  "bool";
			break;
		case "image":
		case "binary":
		case "varbinary":
		case "timestamp":
			sysType=  "byte[]";
			break;
		case "geography":
			sysType = "Microsoft.SqlServer.Types.SqlGeography";
			break;
		case "geometry":
			sysType = "Microsoft.SqlServer.Types.SqlGeometry";
			break;
	}

	return sysType;
}


string GetNativeType(Column column)
{
	string type = GetSystemType(column);
	switch (type.ToLower())
    {
		case "string":
			return "String";
		case "int":
			return "Integer";
		case "short":
			return "Short";
		case "decimal":
			return "Decimal";
		case "double":
			return "Double";
		case "datetime":
			return "DateTime";
		case "byte[]":
			return "Byte";
		case "byte":
			return "Byte";
		case "bool":
			return "Boolean";
		case "float":
			return "Float";
		case "long":
			return "Long";
		default:
			return "/*" + type + "*/";
	}	
}

string CreateProcedureName(Table objTable, string suffix)
{
    string str = string.Empty;
	
	switch (suffix)
    {
		case "L":
			str = "GetAll";
			break;
		case "K":
			str = "Get";
			break;
		case "U":
			str = "Update";
			break;
		case "I":
			str = "Add";
			break;
		case "D":
			str = "Delete";
			break;
    }
	
	return BuildProcedureName(str, objTable.Name);
}

string BuildProcedureName(string sVerb, string sTableName)
{	
	return "daab_" + sVerb + sTableName;
}
#>