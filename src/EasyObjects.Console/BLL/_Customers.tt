<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="System.Core.dll" #>
<#@ assembly name="System.Linq.dll" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#
    var server = new Server(".\\SQLEXPRESS");
    var database = new Database(server, "Northwind");
    var table = new Table(database, "Customers");
    table.Refresh();
#>
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Data;
using System.Data.Common;
using System.Data.SqlClient;
using NCI.EasyObjects;

namespace EasyObjects.Console.BLL
{
    public class <#= table.Name #>Schema : NCI.EasyObjects.Schema
    {
        private static List<SchemaItem> _entries;
<#foreach (Column column in table.Columns)
{#>
        public static SchemaItem <#= column.Name #> = new SchemaItem("<#= column.Name #>", <#= GetDbType(column.DataType.Name) #>, SchemaItemJustify.None, <#= column.DataType.MaximumLength #>, <#= column.Nullable.ToString().ToLower() #>, <#= column.InPrimaryKey.ToString().ToLower() #>, <#= column.IsForeignKey.ToString().ToLower() #>, <#= string.IsNullOrWhiteSpace(column.Default) ? "false" : "true" #>);
<#}#>
        
		public override List<SchemaItem> SchemaEntries
        {
            get
            {
                if (_entries == null || _entries.Count == 0)
                {
                    _entries = new List<SchemaItem>
                    {
<#foreach (Column column in table.Columns)
{#>
                        <#= table.Name #>Schema.<#= column.Name #>,
<#}#>
                    };
                }

                return _entries;
            }
        }

        public static bool HasAutoKey { get => <#= HasAutoKey(table.Columns).ToString().ToLower() #>; }
        public static bool HasRowID { get => false; }
	}
	
	public abstract class _<#= table.Name #> : EasyObject
	{

		public _<#= table.Name #>()
		{
			<#= table.Name #>Schema _schema = new <#= table.Name #>Schema();
			this.SchemaEntries = _schema.SchemaEntries;
			this.SchemaGlobal = "<#= table.Schema #>";
		}
		
		public override void FlushData() 	 
		{ 	 
			this._whereClause = null; 	 
			this._aggregateClause = null; 	 
			base.FlushData(); 	 
		}
			   
		/// <summary>
		/// Loads the business object with info from the database, based on the requested primary key.
		/// </summary>
<#
	PushIndent("\t\t");
	foreach (Column column in table.Columns)
    {
		if (!column.InPrimaryKey) continue;
		WriteLine("/// <param name=\"" + FormatColumnName(column) + "\">" + column.ExtendedProperties["MS_Description"] + "</param>");
    }
	PopIndent();
#>		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadByPrimaryKey(<#
	bool first = true;
	foreach (Column column in table.Columns)
    {
		if (!column.InPrimaryKey) continue;
		if (!first)
        {
			Write(", ");
        }
		Write(GetSystemType(column.DataType.Name) + " " + FormatColumnName(column));
		first = false;
    }
#>)
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					ListDictionary parameters = new ListDictionary
					{
<#
	PushIndent("\t\t\t\t\t\t");
	foreach (Column column in table.Columns)
    {
		if (!column.InPrimaryKey) continue;
		WriteLine("{ " + table.Name + "Schema." + column.Name + ".FieldName, " + FormatColumnName(column) + " },");
    }
	PopIndent();
#>					};

					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "<#= CreateProcedureName(table, "K") #>", parameters, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
<#
	PushIndent("\t\t\t\t\t");
	foreach (Column column in table.Columns)
    {
		if (!column.InPrimaryKey) continue;
		WriteLine("this.Where." + column.Name + ".Value = " + FormatColumnName(column) + ";");
    }
	PopIndent();
#>					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}
	
		/// <summary>
		/// Loads all records from the table.
		/// </summary>
		/// <returns>A Boolean indicating success or failure of the query</returns>
		public bool LoadAll()
		{
			switch(this.DefaultCommandType)
			{
				case CommandType.StoredProcedure:
					return base.LoadFromSql(this.SchemaStoredProcedureWithSeparator + "<#= CreateProcedureName(table, "L") #>", null, CommandType.StoredProcedure);

				case CommandType.Text:
					this.Query.ClearAll();
					this.Where.WhereClauseReset();
					return this.Query.Load();

				default:
					throw new ArgumentException("Invalid CommandType", "commandType");
			}
		}

		/// <summary>
		/// Adds a new record to the internal table.
		/// </summary>
		public override void AddNew()
		{
			base.AddNew();
			this.ApplyDefaults();
		}

		/// <summary>
		/// Apply any default values to columns
		/// </summary>
		protected override void ApplyDefaults()
		{
<#
	PushIndent("\t\t\t");
	foreach (Column column in table.Columns)
    {
		string defaultValue = column.Default.Replace("(", "").Replace(")", "").Replace("\r\n", " ");
		switch (defaultValue.ToLower())
        {
			case "newid":
			case "genguid":
				WriteLine("this." + column.Name + " = Guid.NewGuid();");
				break;
			case "getdate":
			case "sysdate":
				WriteLine("this." + column.Name + " = DateTime.Now;");
				break;
			default:
				if (string.IsNullOrWhiteSpace(defaultValue)) continue;
				WriteLine("//this." + column.Name + " = \"" + defaultValue + "\";");
				break;
        }		
    }
	PopIndent();
#>		}
	}

    /// <summary>
    /// A class which represents the <#= table.Name #> table
    /// </summary>
	[Table("<#= table.Name #>")]
	public partial class <#= table.Name #>Model
	{
<#
	PushIndent("\t\t");
	foreach (Column column in table.Columns)
	{
		if (column.InPrimaryKey) 
		{ 
			WriteLine("[Key]");
		}

		WriteLine("public virtual " + GetSystemType(column.DataType.Name) + (column.Nullable && !column.DataType.IsStringType ? "?" : "") + " " + column.Name + " { get; set; }");
	}
	PopIndent();
#>	}
}
<#+
string FormatColumnName (Column column)
{
	return column.Name.Substring(0, 1).ToLower() + column.Name.Substring(1);
}

bool HasAutoKey (ColumnCollection columns)
{
	foreach (Column column in columns)
    {
		if (column.InPrimaryKey)
        {
			return true;
        }
    }

	return false;
}

string GetDbType (string sqlType)
{
	string dbType="DbType.String";
	switch (sqlType.ToLower()) 
	{
		case "bigint":
			dbType = "DbType.Int64";
			break;
		case "smallint":
			dbType= "DbType.Int16";
			break;
		case "int":
			dbType= "DbType.Int32";
			break;
		case "uniqueidentifier":
			dbType=  "DbType.Guid";
				break;
		case "smalldatetime":
		case "datetime":
		case "datetime2":
		case "date":
		case "time":
			dbType=  "DbType.DateTime";
				break;
		case "float":
			dbType="DbType.Double";
			break;
		case "real":
			dbType="DbType.Single";
			break;
		case "numeric":
		case "smallmoney":
		case "decimal":
		case "money":
			dbType=  "DbType.Decimal";
				break;
		case "tinyint":
			dbType = "DbType.byte";
			break;
		case "bit":
			dbType=  "DbType.Boolean";
				break;
		case "image":
		case "binary":
		case "varbinary":
		case "timestamp":
			dbType=  "DbType.Binary";
				break;
        case "char":
			dbType=  "DbType.AnsiStringFixedLength";
				break;
        case "varchar":
			dbType=  "DbType.AnsiString";
				break;
        case "nchar":
			dbType=  "DbType.StringFixedLength";
				break;
        case "nvarchar":
			dbType=  "DbType.String";
				break;
	}
	return dbType;
}

string GetSystemType(string sqlType)
{
	string sysType="string";
	switch (sqlType.ToLower()) 
	{
		case "bigint":
			sysType = "long";
			break;
		case "smallint":
			sysType= "short";
			break;
		case "int":
			sysType= "int";
			break;
		case "uniqueidentifier":
			sysType=  "Guid";
				break;
		case "smalldatetime":
		case "datetime":
		case "datetime2":
		case "date":
		case "time":
			sysType=  "DateTime";
				break;
		case "float":
			sysType="double";
			break;
		case "real":
			sysType="float";
			break;
		case "numeric":
		case "smallmoney":
		case "decimal":
		case "money":
			sysType=  "decimal";
				break;
		case "tinyint":
			sysType = "byte";
			break;
		case "bit":
			sysType=  "bool";
				break;
		case "image":
		case "binary":
		case "varbinary":
		case "timestamp":
			sysType=  "byte[]";
				break;
		case "geography":
			sysType = "Microsoft.SqlServer.Types.SqlGeography";
			break;
		case "geometry":
			sysType = "Microsoft.SqlServer.Types.SqlGeometry";
			break;
	}
	return sysType;
}

string CreateProcedureName(Table objTable, string suffix)
{
    string str = string.Empty;
	
	switch (suffix)
    {
		case "L":
			str = "GetAll";
			break;
		case "K":
			str = "Get";
			break;
		case "U":
			str = "Update";
			break;
		case "I":
			str = "Add";
			break;
		case "D":
			str = "Delete";
			break;
    }
	
	return BuildProcedureName(str, objTable.Name);
}

string BuildProcedureName(string sVerb, string sTableName)
{	
	return "daab_" + sVerb + sTableName;
}
#>