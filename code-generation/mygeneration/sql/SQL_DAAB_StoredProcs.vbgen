##|TYPE Template
##|UNIQUEID 75925bc5-7391-4e1e-a245-c3b7886e9ddf
##|TITLE Sql DAAB Stored Procedures
##|NAMESPACE Microsoft SQL Server
##|SOURCE_TYPE Source
##|OUTPUT_LANGUAGE Transact-SQL
##|COMMENTS_BEGIN
Use this for SQL stored procs for Microsoft Data Access Application Blocks (DAAB) business entities. Select multiple tables and generate all your stored procedures 
in one click!
##|COMMENTS_END
##|GUI_ENGINE Microsoft Script
##|GUI_LANGUAGE VBScript
##|GUI_BEGIN
Dim cmbDatabases
Dim cmbFormat
Dim txtFormat
Dim txtPrefix
Dim lstTables

Sub setup()

	Dim sOutputPath

	If Not input.Contains("lstTables") Or Not input.Contains("txtPath") Then

	If context.Objects.ContainsKey("DnpUtils") Then
		DnpUtils.ReadInputFromCache(context)
	End if

		ui.Title = "Select tables for this Template."
		ui.Width  = 330
		ui.Height = 640

		' Grab default output path
		sOutputPath = ""
		If input.Contains("defaultOutputPath") Then 
			sOutputPath = input.Item("defaultOutputPath")
		End If

		ui.AddLabel "lblPath", "Output file path: ",  "Select the output path."
		ui.AddTextBox "txtPath", sOutputPath, "Select the Output Path."
		ui.AddFilePicker "btnPath", "Select Path", "Select the Output Path.", "txtPath", true

		' List Databases in a ComboBox
		ui.AddLabel "lblDatabases", "Select a database:", "Select a database in the dropdown below."
		Set cmbDatabases = ui.AddComboBox("cmbDatabase", "Select a database.")

		' List Tables in a listbox
		ui.AddLabel "lblTables", "Select tables:", "Select tables from the listbox below."
		Set lstTables = ui.AddListBox ("lstTables", "Select tables:")
		lstTables.Height = 150

		' Attach the onchange event to the cmbDatabases control.
		setupDatabaseDropdown cmbDatabases
		cmbDatabases.AttachEvent "onchange", "cmbDatabases_onchange"
		
		' Prefix
		ui.AddLabel "lblPrefix", "Procedure prefix:", "Enter a procedure prefix."
		Set txtPrefix = ui.AddTextBox("txtPrefix", "", "Enter the procedure prefix")
		
		' List proc formats
		ui.AddLabel "lblFormat", "Select procedure format:", "Select a procedure format from the listbox below."
		Set cmbFormat = ui.AddComboBox("cmbFormat", "Select a procedure format.")
		cmbFormat.AttachEvent "onchange", "cmbFormat_onchange"
		Set txtFormat = ui.AddTextBox("txtFormat", "", "Enter the procedure format")
		txtFormat.Enabled = false
		setupFormatDropdown cmbFormat

		' Add options
		ui.AddCheckBox "chkAlter", "Use ALTER procedures", False, "Check this to ALTER existing stored procedures, good for preserving permissions"
		ui.AddCheckBox "chkGenDoc", "Generate Documentation", True, "Check this to generate documentation after stored procedures are generated"
		ui.AddCheckBox "chkNoCount", "SET NOCOUNT OFF", False, "If checked, NOCOUNT is set to OFF for the INSERT, UPDATE, and DELETE statements"
		ui.AddCheckBox "chkSql2005", "Target SQL Server 2005", False, "Check this to add support for SQL Server 2005"

		ui.ShowGUI = True
	Else 
		ui.ShowGUI = False
	End if

End Sub

Sub setupDatabaseDropdown(cmbDatabases)
	cmbDatabases.BindData MyMeta.Databases

	If Not MyMeta.DefaultDatabase Is Nothing Then
		cmbDatabases.SelectedValue = MyMeta.DefaultDatabase.Name
		bindTables cmbDatabases.SelectedValue
	End If
End Sub

Sub bindTables(sDatabase)
	Set db = MyMeta.Databases(sDatabase)
	lstTables.BindData(db.Tables)
End Sub

' Event Handler
Sub cmbDatabases_onchange(control)
	Set cmbDatabases = ui.item("cmbDatabase")
	bindTables cmbDatabases.SelectedText
End Sub

Sub setupFormatDropdown(cmbDatabases)
	cmbFormat.Add "daab", "ASP.NET Starter Kits"
	cmbFormat.Add "doodads", "dOOdads"
	cmbFormat.Add "custom", "Custom"
	cmbFormat.SelectedValue = "daab"
	cmbFormat_onchange(cmbFormat)
End Sub

Sub cmbFormat_onchange(control)

	txtFormat.Enabled = False

	Select Case cmbFormat.SelectedValue
		Case "daab"
			txtFormat.Text = "{prefix}{verb}{table}"
			txtPrefix.Text = "daab_"
		Case "doodads"
			txtFormat.Text = "{prefix}{table}{verb}"
			txtPrefix.Text = "proc_"
		Case "custom"
			txtFormat.Enabled = True
	End Select
	
End Sub
##|GUI_END
##|BODY_MODE Markup
##|BODY_ENGINE Microsoft Script
##|BODY_LANGUAGE VBScript
##|BODY_TAG_START <%
##|BODY_TAG_END %>
##|BODY_BEGIN
<%
'------------------------------------------------------------------------------
' Copyright 2005 by Noonan Consulting Inc.
' All Rights Reserved 
'
' Permission to use, copy, modify, and distribute this software and its 
' documentation for any purpose and without fee is hereby granted, 
' provided that the above copyright notice appear in all copies and that 
' both that copyright notice and this permission notice appear in 
' supporting documentation. 
'
' NCI DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS 
' SOFTWARE, INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY 
' AND FITNESS, IN NO EVENT SHALL NCI BE LIABLE FOR ANY 
' SPECIAL, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES 
' WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, 
' WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER 
' TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE 
' OR PERFORMANCE OF THIS SOFTWARE. 
'------------------------------------------------------------------------------
' SQL_DAAB_StoredProcs.vbgen
' Last Update : 02/01/2005
'------------------------------------------------------------------------------
'
'  This template generates 5 stored procedures
'
'  1) Get[TableName]
'  2) Update[TableName]
'  3) Add[TableName]
'  4) Delete[TableName]
'  5) GetAll[TableName]
'
'------------------------------------------------------------------------------

If context.Objects.ContainsKey("DnpUtils") Then
	DnpUtils.SaveInputToCache(context)
End if

Dim objDatabase
Dim objTable
Dim objColumn
Dim intLp
Dim blnFirst
Dim strProcName
Dim blnHasComputed
Dim strWhereClause
Dim strWhereAnd
Dim strWhereFields
Dim strComma
Dim colTableNames
Dim strBuffer
Dim strDatabaseName 
Dim blnGenDoc
Dim strFilename
Dim strFilenameBase
Dim intLen
Dim intPos
Dim sPrefix
Dim sFormat
Dim sStyle
Dim bNoCountOff

strDatabaseName  = input.Item("cmbDatabase")
Set objDatabase = MyMeta.Databases(strDatabaseName)

Set colTableNames = input.Item("lstTables")

' Do we do ALTER or CREATE
alterStatement = input.Item("chkAlter")

' Do we do Generate Documentation
blnGenDoc = input.Item("chkGenDoc")

' SET NOCOUNT OFF; ?
bNoCountOff = input.Item("chkNoCount")
IF bNoCountOff Then
	strNoCount = "OFF"
Else
	strNoCount = "ON"
End If 

' Add Sql 2005 support
addSql2005 = input.Item("chkSql2005")

' Save the output file for this Table
strFilenameBase = input.Item("txtPath")
sPrefix = input.Item("txtPrefix")
sFormat = input.Item("txtFormat")
sStyle = input.Item("cmbFormat")

intLen = Len(strFilenameBase)
intPos = InStrRev(strFilenameBase, "\") 

If Not intPos = intLen Then
	strFilenameBase = strFilenameBase & "\"
End If
%>
USE [<%output.write objDatabase.Name %>]
GO
<%

' Loop through the tables the user select and generate the stored procs and save them to disk
For intLp = 0 To colTableNames.Count - 1

	Set objTable = objDatabase.Tables(colTableNames.item(intLp))
	'prefix = "daab_"

'----------------------------------------------------------------------
' Get 
'----------------------------------------------------------------------
strProcName = BuildProcedureName(BuildVerb("Get", sStyle), objTable.Name, objTable.Alias)
%>
<%= BuildCreateAlterStatement(strProcName, alterStatement) %>
(
<%
	' List all keys as parameters
	blnFirst = True
	For Each objColumn In objTable.PrimaryKeys

		If Not blnFirst Then 
			output.write  "," & vbCrLf
		End if	

		blnFirst = False	

		output.write "	@" & GetParameterName(objColumn) & " " & objColumn.DataTypeNameComplete
	Next
%>
)
AS
BEGIN
	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
<%
	' List all fields
	blnFirst = True
	For Each objColumn In objTable.Columns

		If Not blnFirst Then 
			output.write  "," & vbCrLf
		End if	

		blnFirst = False			

		output.write "		[" & objColumn.Name & "]"
	Next

	output.write vbCrLf
%>	FROM [<%output.write objTable.Name %>]
	WHERE
<%
	' Compare keys with parameters
	blnFirst = True
	For Each objColumn In objTable.PrimaryKeys

		If Not blnFirst Then 
			output.write  " AND" & vbCrLf
		End if	

		blnFirst = False					

		output.write "		([" & objColumn.Name & "] = @" & GetParameterName(objColumn) & ")"
	Next

	output.write vbCrLf		
%>
	SET @Err = @@Error

	RETURN @Err
END
GO

<%If blnGenDoc Then%>
-- Display the status of Proc creation
IF (@@Error = 0) PRINT 'Procedure Creation: <%output.write strProcName%> Succeeded'
ELSE PRINT 'Procedure Creation: <%output.write strProcName%> Error on Creation'
GO
<%End If

'----------------------------------------------------------------------
' GetAll 
'----------------------------------------------------------------------
strProcName = BuildProcedureName(BuildVerb("GetAll", sStyle), objTable.Name, objTable.Alias)
%>
<%= BuildCreateAlterStatement(strProcName, alterStatement) %>
AS
BEGIN

	SET NOCOUNT ON
	DECLARE @Err int

	SELECT
<%
		' List all fields
		blnFirst = True
		For Each objColumn In objTable.Columns
			If Not blnFirst Then 
				output.write  "," & vbCrLf
			End if

			blnFirst = False	

			output.write "		[" & objColumn.Name & "]"
		Next
%>
	FROM [<%output.write objTable.Name %>]

	SET @Err = @@Error

	RETURN @Err
END
GO

<%If blnGenDoc Then%>
-- Display the status of Proc creation
IF (@@Error = 0) PRINT 'Procedure Creation: <%output.write strProcName%> Succeeded'
ELSE PRINT 'Procedure Creation: <%output.write strProcName%> Error on Creation'
GO
<%End If

'----------------------------------------------------------------------
' Update
'----------------------------------------------------------------------
If objTable.Columns.Count = objTable.PrimaryKeys.Count Then
	output.writeLn ""
	output.writeLn "-------------------------------------------"
	output.writeLn "-- NO UPDATE Stored Procedure Generated    "
	output.writeLn "-- All Columns are part of the Primary key "
	output.writeLn "-------------------------------------------"
	output.writeLn ""	
Else

strProcName = BuildProcedureName(BuildVerb("Update", sStyle), objTable.Name, objTable.Alias)
%>
<%= BuildCreateAlterStatement(strProcName, alterStatement) %>
(
<%
	' List all parameters
	blnFirst = True
	For Each objColumn In objTable.Columns

		If Not blnFirst Then 
			output.write  "," & vbCrLf
		End if

		blnFirst = False

		output.write "	@" & GetParameterName(objColumn) & " " & objColumn.DataTypeNameComplete

		If objColumn.IsNullable Or objColumn.IsComputed Then
			output.write " = NULL"
		End If

		If objColumn.IsComputed Then
			output.write " OUTPUT"
		End If				

	Next
%>
)
AS
BEGIN

	SET NOCOUNT OFF
	DECLARE @Err int

	UPDATE [<%output.write objTable.Name %>]
	SET
<%
	' List all fields
	blnFirst = True
	For Each objColumn In objTable.Columns

		If Not objColumn.IsInPrimaryKey And Not objColumn.IsAutoKey And Not objColumn.IsComputed Then
		   
			If Not blnFirst Then 
				output.write  "," & vbCrLf
			End if	

			blnFirst = False

			output.write "		[" & objColumn.Name & "] = @" & TrimSpaces(objColumn.Name)
		End If	
	Next

	output.write vbCrLf		
%>	WHERE
<%
	' Compare keys with parameters
	blnFirst = True
	For Each objColumn In objTable.PrimaryKeys
		If Not blnFirst Then 
			output.write "	AND	[" & objColumn.Name & "] = @" & GetParameterName(objColumn) & vbCrLf
		Else
			output.write "		[" & objColumn.Name & "] = @" & GetParameterName(objColumn) & vbCrLf
		End if
		blnFirst = False
	Next

	For Each objColumn In objTable.Columns
		If objColumn.DataTypeName = "timestamp" Then
			If addSql2005 Then
				output.write "	AND [" & objColumn.Name & "] = @" & GetParameterName(objColumn) & vbCrLf	
			Else
				output.write "	AND TSEQUAL(" & objColumn.Name & ", @" & GetParameterName(objColumn) & ")" & vbCrLf	
			End If
		End if
	Next		
%>

	SET @Err = @@Error
<%	
	' Add the Logic to return computed columns if necessary 
	blnHasComputed = False
	strWhereClause = ""
	strWhereAnd = ""
	strWhereFields = ""
	strComma = ""

	blnFirst = True
	For Each objColumn In objTable.Columns

		If objColumn.IsComputed Then
			blnHasComputed = True
		End If

		If objColumn.IsInPrimaryKey Then
			strWhereClause = strWhereClause & strWhereAnd & "[" & objColumn.Name & "] = @" & GetParameterName(objColumn)
			strWhereAnd = " AND "
		End If

		If objColumn.IsComputed Then
			strWhereFields = strWhereFields & strComma & "@" & GetParameterName(objColumn) & " = [" &  objColumn.Name & "]" 
			strComma =  ", " 
		End If		
	Next

	If blnHasComputed Then
		output.write vbCrLf
		output.write "    SELECT "
		output.write strWhereFields
		output.write vbCrLf & "      FROM [" & objTable.Name & "]" 
		output.write vbCrLf & "     WHERE " & strWhereClause & vbCrLf			
	End If		
%>
	RETURN @Err
END
GO

<%If blnGenDoc Then%>
-- Display the status of Proc creation
IF (@@Error = 0) PRINT 'Procedure Creation: <%output.write strProcName%> Succeeded'
ELSE PRINT 'Procedure Creation: <%output.write strProcName%> Error on Creation'
GO

<% End If ' objTable.Columns.Count = objTable.PrimaryKeys.Count %>

<%End If

'----------------------------------------------------------------------
' Insert
'----------------------------------------------------------------------
strProcName = BuildProcedureName(BuildVerb("Add", sStyle), objTable.Name, objTable.Alias)
%>
<%= BuildCreateAlterStatement(strProcName, alterStatement) %>
(
<%
	' List all fields as parameters
	blnFirst = True
	For Each objColumn In objTable.Columns

		If Not blnFirst Then 
			output.write "," & vbCrLf
		End If 

		blnFirst = False

		output.write "	@" & GetParameterName(objColumn) & " " & objColumn.DataTypeNameComplete

		If objColumn.IsNullable Or objColumn.IsComputed Or objColumn.IsAutoKey Then
			output.write " = NULL"
		End If

		If (objColumn.IsInPrimaryKey And objColumn.IsAutoKey) Or objColumn.IsComputed Then
			output.write " OUTPUT"
		End If				
	Next
%>
)
AS
BEGIN

	SET NOCOUNT <%= strNoCount%>
	DECLARE @Err int
<%
	' generate code to initialize (if necessary) for all keys of uniqueidentifier type
	blnFirst = True
	For Each objColumn In objTable.PrimaryKeys

		If objColumn.DataTypeNameComplete = "uniqueidentifier" Then
			output.write "	IF @" & GetParameterName(objColumn) & " IS NULL" & vbCrLf
			output.write "		 SET @" & GetParameterName(objColumn) & " = NEWID()" & vbCrLf
			output.write vbCrLf
			'output.write "	SET @Err = @@Error" & vbCrLf
			'output.write vbCrLf
			'output.write "	IF (@Err <> 0)" & vbCrLf
			'output.write "	    RETURN @Err" & vbCrLf
			'output.write vbCrLf 
		End If
	Next
%>
	INSERT
	INTO [<%output.write objTable.Name %>]
	(
<%
		' List all fields except identity (if one exists)
		blnFirst = True
		For Each objColumn In objTable.Columns

			' Check if field is not an indentity in which case we won't include it into insert list
			If Not objColumn.IsAutoKey And Not objColumn.IsComputed Then 			
				If Not blnFirst Then 
					output.write  "," & vbCrLf
				End if	

				blnFirst = False

				output.write "		[" & objColumn.Name & "]" 
			End If
		Next

		output.write vbCrLf 		
%>	)
	VALUES
	(
<%
		' List all parameters except the one for indetity (if one exists)
		blnFirst = True
		For Each objColumn In objTable.Columns

			' check if fields is not an identity
			If Not objColumn.IsAutoKey And Not objColumn.IsComputed Then 			
				If Not blnFirst Then 
					output.write  "," & vbCrLf
				End if	

				blnFirst = False

				output.write "		@" & GetParameterName(objColumn)
			End If
		Next

		output.write vbCrLf 				
%>	)

	SET @Err = @@Error
<%
	' Add the Logic to return computed columns if necessary 
	blnHasComputed = False
	strWhereClause = ""
	strWhereAnd = ""
	strWhereFields = ""
	strComma = ""

	blnFirst = True
	For Each objColumn In objTable.Columns

		If objColumn.IsAutoKey Then
			output.write "	SELECT @" & GetParameterName(objColumn) & " = SCOPE_IDENTITY()" & vbCrLf
		End If	

		If objColumn.IsComputed Then
			blnHasComputed = True
		End If

		If objColumn.IsInPrimaryKey Then
			strWhereClause = strWhereClause & strWhereAnd & "[" & objColumn.Name & "] = @" & GetParameterName(objColumn)
			strWhereAnd = " AND "
		End If

		If objColumn.IsComputed Then
			strWhereFields = strWhereFields & strComma & "@" & GetParameterName(objColumn) & " = [" &  objColumn.Name & "]" 
			strComma =  ", " 
		End If		
	Next

	If blnHasComputed Then
		output.write vbCrLf
		output.write "    SELECT "
		output.write strWhereFields
		output.write vbCrLf & "      FROM [" & objTable.Name & "]" 
		output.write vbCrLf & "     WHERE " & strWhereClause & vbCrLf			
	End If		
%>
	RETURN @Err
END
GO

<%If blnGenDoc Then%>
-- Display the status of Proc creation
IF (@@Error = 0) PRINT 'Procedure Creation: <%output.write strProcName %> Succeeded'
ELSE PRINT 'Procedure Creation: <%output.write strProcName %> Error on Creation'
GO
<%End If

'----------------------------------------------------------------------
' Delete
'----------------------------------------------------------------------
strProcName = BuildProcedureName(BuildVerb("Delete", sStyle), objTable.Name, objTable.Alias)
%>
<%= BuildCreateAlterStatement(strProcName, alterStatement) %>
(
<%
	' List all keys as parameters
	blnFirst = True
	For Each objColumn In objTable.PrimaryKeys

		' check if at end of keys
		If Not blnFirst Then
			output.write "," & vbCrLf
		End If

		blnFirst = False

		output.write "	@" & GetParameterName(objColumn) & " " & objColumn.DataTypeNameComplete
	Next
%>
)
AS
BEGIN

	SET NOCOUNT <%= strNoCount%>
	DECLARE @Err int

	DELETE
	FROM [<%output.write objTable.Name %>]
	WHERE
<%
	' Compare keys with parameters
	blnFirst = True
	For Each objColumn In objTable.PrimaryKeys

		' Continue where part with an AND
		If Not blnFirst Then
			output.write " AND" & vbCrLf
		End If

		blnFirst = False

		output.write "		[" & objColumn.Name & "] = @" & GetParameterName(objColumn)
	Next
%>
	SET @Err = @@Error

	RETURN @Err
END
GO

<%If blnGenDoc Then%>
-- Display the status of Proc creation
IF (@@Error = 0) PRINT 'Procedure Creation: <%= strProcName %> Succeeded'
ELSE PRINT 'Procedure Creation: <%= strProcName %> Error on Creation'
GO
<%End If

	' Save the output file for this Table
	strFilename = strFilenameBase & objTable.Name & ".sql"

	output.save strFilename, False
	strBuffer = strBuffer & output.text
	output.clear
Next '  tableName
	
output.write strBuffer

filename = input.item("txtPath") 
lenth = Len(filename) 
pos = InStrRev(filename, "\") 

If Not pos = lenth Then 
  filename = filename & "\" 
End If 

filename = filename & "MicrosoftSQL_ALL.SQL" 
output.save filename, false 

' END OF TEMPLATE
%>

<%

Function BuildCreateAlterStatement(strProcName, blnAlterStatement)

	Dim strStatement
	strStatement = ""
	
	If Not blnAlterStatement Then 
		' Drop and recreate
		strStatement = strStatement & "IF EXISTS (SELECT * FROM SYSOBJECTS WHERE ID = OBJECT_ID('" & strProcName & "') AND sysstat & 0xf = 4)" & vbCRLF
		strStatement = strStatement & "    DROP PROCEDURE [" & strProcName & "];" & vbCRLF
		strStatement = strStatement & "GO" & vbCRLF & vbCRLF
	
		strStatement = strStatement & "CREATE PROCEDURE [" & strProcName & "]"
	Else
		strStatement = strStatement & "ALTER PROCEDURE [" & strProcName & "]"
	End If 

	BuildCreateAlterStatement = strStatement 

End Function

Function BuildProcedureName(sVerb, sTableName, sTableAlias)
	Dim sName
	
	sName = Replace(sFormat, "{verb}", sVerb)
	sName = Replace(sName, "{table}", TrimSpaces(sTableName))
	sName = Replace(sName, "{alias}", TrimSpaces(sTableAlias))
	sName = Replace(sName, "{prefix}", sPrefix)
	
	BuildProcedureName = sName
	
End Function

Function BuildVerb(sVerb, sStyle)

	Select Case sStyle
		Case "doodads"
			Select Case sVerb
				Case "Get"
					sVerb = "LoadByPrimaryKey"
				Case "GetAll"
					sVerb = "LoadAll"
				Case "Add"
					sVerb = "Insert"
			End Select
		Case "daab"
	End Select
	
	BuildVerb = sVerb
	
End Function

Function GetParameterName(objColumn)
	Dim strName
	strName = TrimSpaces(objColumn.Name)
	GetParameterName = strName
End Function

Function TrimSpaces(str)

	Dim strTName
	Dim strMame
	Dim strChar
	Dim intLen
	Dim intLp

	strName = ""
	strTName = str
	intLen = Len(strTName)

	For intLp = 1 To intLen
		strChar = Mid(strTName, intLp, 1)
		If Not strChar = " " Then
			strName = strName & strChar
		End If
	Next

	TrimSpaces = strName
End Function
%>
##|BODY_END